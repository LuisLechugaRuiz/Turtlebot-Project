// Generated by gencpp from file turtlebot_2dnav/bounds_point_size.msg
// DO NOT EDIT!


#ifndef TURTLEBOT_2DNAV_MESSAGE_BOUNDS_POINT_SIZE_H
#define TURTLEBOT_2DNAV_MESSAGE_BOUNDS_POINT_SIZE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtlebot_2dnav
{
template <class ContainerAllocator>
struct bounds_point_size_
{
  typedef bounds_point_size_<ContainerAllocator> Type;

  bounds_point_size_()
    : points_size()
    , red_zones_active(false)  {
    }
  bounds_point_size_(const ContainerAllocator& _alloc)
    : points_size(_alloc)
    , red_zones_active(false)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _points_size_type;
  _points_size_type points_size;

   typedef uint8_t _red_zones_active_type;
  _red_zones_active_type red_zones_active;





  typedef boost::shared_ptr< ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator> const> ConstPtr;

}; // struct bounds_point_size_

typedef ::turtlebot_2dnav::bounds_point_size_<std::allocator<void> > bounds_point_size;

typedef boost::shared_ptr< ::turtlebot_2dnav::bounds_point_size > bounds_point_sizePtr;
typedef boost::shared_ptr< ::turtlebot_2dnav::bounds_point_size const> bounds_point_sizeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator1> & lhs, const ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator2> & rhs)
{
  return lhs.points_size == rhs.points_size &&
    lhs.red_zones_active == rhs.red_zones_active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator1> & lhs, const ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlebot_2dnav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2760f00cd3ace23bdfe186aae6abbb4b";
  }

  static const char* value(const ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2760f00cd3ace23bULL;
  static const uint64_t static_value2 = 0xdfe186aae6abbb4bULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlebot_2dnav/bounds_point_size";
  }

  static const char* value(const ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] points_size\n"
"bool red_zones_active\n"
;
  }

  static const char* value(const ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points_size);
      stream.next(m.red_zones_active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bounds_point_size_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlebot_2dnav::bounds_point_size_<ContainerAllocator>& v)
  {
    s << indent << "points_size[]" << std::endl;
    for (size_t i = 0; i < v.points_size.size(); ++i)
    {
      s << indent << "  points_size[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.points_size[i]);
    }
    s << indent << "red_zones_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.red_zones_active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLEBOT_2DNAV_MESSAGE_BOUNDS_POINT_SIZE_H
