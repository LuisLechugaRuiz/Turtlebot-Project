// Generated by gencpp from file turtlebot_2dnav/CarryingPersonRequest.msg
// DO NOT EDIT!


#ifndef TURTLEBOT_2DNAV_MESSAGE_CARRYINGPERSONREQUEST_H
#define TURTLEBOT_2DNAV_MESSAGE_CARRYINGPERSONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <turtlebot_2dnav/ROI.h>

namespace turtlebot_2dnav
{
template <class ContainerAllocator>
struct CarryingPersonRequest_
{
  typedef CarryingPersonRequest_<ContainerAllocator> Type;

  CarryingPersonRequest_()
    : person()  {
    }
  CarryingPersonRequest_(const ContainerAllocator& _alloc)
    : person(_alloc)  {
  (void)_alloc;
    }



   typedef  ::turtlebot_2dnav::ROI_<ContainerAllocator>  _person_type;
  _person_type person;





  typedef boost::shared_ptr< ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CarryingPersonRequest_

typedef ::turtlebot_2dnav::CarryingPersonRequest_<std::allocator<void> > CarryingPersonRequest;

typedef boost::shared_ptr< ::turtlebot_2dnav::CarryingPersonRequest > CarryingPersonRequestPtr;
typedef boost::shared_ptr< ::turtlebot_2dnav::CarryingPersonRequest const> CarryingPersonRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator1> & lhs, const ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator2> & rhs)
{
  return lhs.person == rhs.person;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator1> & lhs, const ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlebot_2dnav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60b1f66dc52c1ec4715013a78543dbbd";
  }

  static const char* value(const ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60b1f66dc52c1ec4ULL;
  static const uint64_t static_value2 = 0x715013a78543dbbdULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlebot_2dnav/CarryingPersonRequest";
  }

  static const char* value(const ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlebot_2dnav/ROI person\n"
"\n"
"\n"
"================================================================================\n"
"MSG: turtlebot_2dnav/ROI\n"
"Header Header\n"
"string type\n"
"geometry_msgs/Point center\n"
"float32 size_x\n"
"float32 size_y\n"
"uint8 index\n"
"bool isnew\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.person);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarryingPersonRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlebot_2dnav::CarryingPersonRequest_<ContainerAllocator>& v)
  {
    s << indent << "person: ";
    s << std::endl;
    Printer< ::turtlebot_2dnav::ROI_<ContainerAllocator> >::stream(s, indent + "  ", v.person);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLEBOT_2DNAV_MESSAGE_CARRYINGPERSONREQUEST_H
