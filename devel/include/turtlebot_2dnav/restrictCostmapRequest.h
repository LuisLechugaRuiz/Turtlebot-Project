// Generated by gencpp from file turtlebot_2dnav/restrictCostmapRequest.msg
// DO NOT EDIT!


#ifndef TURTLEBOT_2DNAV_MESSAGE_RESTRICTCOSTMAPREQUEST_H
#define TURTLEBOT_2DNAV_MESSAGE_RESTRICTCOSTMAPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace turtlebot_2dnav
{
template <class ContainerAllocator>
struct restrictCostmapRequest_
{
  typedef restrictCostmapRequest_<ContainerAllocator> Type;

  restrictCostmapRequest_()
    : Point()
    , index(0)
    , color(0)
    , restrict(false)
    , isvertical(false)
    , exit(false)  {
    }
  restrictCostmapRequest_(const ContainerAllocator& _alloc)
    : Point(_alloc)
    , index(0)
    , color(0)
    , restrict(false)
    , isvertical(false)
    , exit(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _Point_type;
  _Point_type Point;

   typedef int32_t _index_type;
  _index_type index;

   typedef int32_t _color_type;
  _color_type color;

   typedef uint8_t _restrict_type;
  _restrict_type restrict;

   typedef uint8_t _isvertical_type;
  _isvertical_type isvertical;

   typedef uint8_t _exit_type;
  _exit_type exit;





  typedef boost::shared_ptr< ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct restrictCostmapRequest_

typedef ::turtlebot_2dnav::restrictCostmapRequest_<std::allocator<void> > restrictCostmapRequest;

typedef boost::shared_ptr< ::turtlebot_2dnav::restrictCostmapRequest > restrictCostmapRequestPtr;
typedef boost::shared_ptr< ::turtlebot_2dnav::restrictCostmapRequest const> restrictCostmapRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator1> & lhs, const ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator2> & rhs)
{
  return lhs.Point == rhs.Point &&
    lhs.index == rhs.index &&
    lhs.color == rhs.color &&
    lhs.restrict == rhs.restrict &&
    lhs.isvertical == rhs.isvertical &&
    lhs.exit == rhs.exit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator1> & lhs, const ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlebot_2dnav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c14041ac6488aa9930bd5e86e63fb3d5";
  }

  static const char* value(const ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc14041ac6488aa99ULL;
  static const uint64_t static_value2 = 0x30bd5e86e63fb3d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlebot_2dnav/restrictCostmapRequest";
  }

  static const char* value(const ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point Point\n"
"int32 index\n"
"int32 color\n"
"bool restrict\n"
"bool isvertical\n"
"bool exit\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Point);
      stream.next(m.index);
      stream.next(m.color);
      stream.next(m.restrict);
      stream.next(m.isvertical);
      stream.next(m.exit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct restrictCostmapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlebot_2dnav::restrictCostmapRequest_<ContainerAllocator>& v)
  {
    s << indent << "Point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.Point);
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "color: ";
    Printer<int32_t>::stream(s, indent + "  ", v.color);
    s << indent << "restrict: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.restrict);
    s << indent << "isvertical: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isvertical);
    s << indent << "exit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLEBOT_2DNAV_MESSAGE_RESTRICTCOSTMAPREQUEST_H
