// Generated by gencpp from file turtlebot_2dnav/fake_bound.msg
// DO NOT EDIT!


#ifndef TURTLEBOT_2DNAV_MESSAGE_FAKE_BOUND_H
#define TURTLEBOT_2DNAV_MESSAGE_FAKE_BOUND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace turtlebot_2dnav
{
template <class ContainerAllocator>
struct fake_bound_
{
  typedef fake_bound_<ContainerAllocator> Type;

  fake_bound_()
    : pointleftmin()
    , pointleftmax()
    , pointrightmin()
    , pointrightmax()
    , isvertical(false)
    , index(0)
    , resize(false)
    , exit(false)  {
    }
  fake_bound_(const ContainerAllocator& _alloc)
    : pointleftmin(_alloc)
    , pointleftmax(_alloc)
    , pointrightmin(_alloc)
    , pointrightmax(_alloc)
    , isvertical(false)
    , index(0)
    , resize(false)
    , exit(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pointleftmin_type;
  _pointleftmin_type pointleftmin;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pointleftmax_type;
  _pointleftmax_type pointleftmax;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pointrightmin_type;
  _pointrightmin_type pointrightmin;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pointrightmax_type;
  _pointrightmax_type pointrightmax;

   typedef uint8_t _isvertical_type;
  _isvertical_type isvertical;

   typedef uint8_t _index_type;
  _index_type index;

   typedef uint8_t _resize_type;
  _resize_type resize;

   typedef uint8_t _exit_type;
  _exit_type exit;





  typedef boost::shared_ptr< ::turtlebot_2dnav::fake_bound_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlebot_2dnav::fake_bound_<ContainerAllocator> const> ConstPtr;

}; // struct fake_bound_

typedef ::turtlebot_2dnav::fake_bound_<std::allocator<void> > fake_bound;

typedef boost::shared_ptr< ::turtlebot_2dnav::fake_bound > fake_boundPtr;
typedef boost::shared_ptr< ::turtlebot_2dnav::fake_bound const> fake_boundConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlebot_2dnav::fake_bound_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlebot_2dnav::fake_bound_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlebot_2dnav::fake_bound_<ContainerAllocator1> & lhs, const ::turtlebot_2dnav::fake_bound_<ContainerAllocator2> & rhs)
{
  return lhs.pointleftmin == rhs.pointleftmin &&
    lhs.pointleftmax == rhs.pointleftmax &&
    lhs.pointrightmin == rhs.pointrightmin &&
    lhs.pointrightmax == rhs.pointrightmax &&
    lhs.isvertical == rhs.isvertical &&
    lhs.index == rhs.index &&
    lhs.resize == rhs.resize &&
    lhs.exit == rhs.exit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlebot_2dnav::fake_bound_<ContainerAllocator1> & lhs, const ::turtlebot_2dnav::fake_bound_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlebot_2dnav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_2dnav::fake_bound_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_2dnav::fake_bound_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot_2dnav::fake_bound_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot_2dnav::fake_bound_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_2dnav::fake_bound_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_2dnav::fake_bound_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlebot_2dnav::fake_bound_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1c2e5bd63abef51265cdf5e8668cf43";
  }

  static const char* value(const ::turtlebot_2dnav::fake_bound_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1c2e5bd63abef51ULL;
  static const uint64_t static_value2 = 0x265cdf5e8668cf43ULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlebot_2dnav::fake_bound_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlebot_2dnav/fake_bound";
  }

  static const char* value(const ::turtlebot_2dnav::fake_bound_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlebot_2dnav::fake_bound_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point pointleftmin\n"
"geometry_msgs/Point pointleftmax\n"
"geometry_msgs/Point pointrightmin\n"
"geometry_msgs/Point pointrightmax\n"
"bool isvertical\n"
"uint8 index\n"
"bool resize\n"
"bool exit\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::turtlebot_2dnav::fake_bound_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlebot_2dnav::fake_bound_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pointleftmin);
      stream.next(m.pointleftmax);
      stream.next(m.pointrightmin);
      stream.next(m.pointrightmax);
      stream.next(m.isvertical);
      stream.next(m.index);
      stream.next(m.resize);
      stream.next(m.exit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fake_bound_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlebot_2dnav::fake_bound_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlebot_2dnav::fake_bound_<ContainerAllocator>& v)
  {
    s << indent << "pointleftmin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pointleftmin);
    s << indent << "pointleftmax: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pointleftmax);
    s << indent << "pointrightmin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pointrightmin);
    s << indent << "pointrightmax: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pointrightmax);
    s << indent << "isvertical: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isvertical);
    s << indent << "index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.index);
    s << indent << "resize: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.resize);
    s << indent << "exit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLEBOT_2DNAV_MESSAGE_FAKE_BOUND_H
