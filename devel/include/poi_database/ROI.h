// Generated by gencpp from file poi_database/ROI.msg
// DO NOT EDIT!


#ifndef POI_DATABASE_MESSAGE_ROI_H
#define POI_DATABASE_MESSAGE_ROI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace poi_database
{
template <class ContainerAllocator>
struct ROI_
{
  typedef ROI_<ContainerAllocator> Type;

  ROI_()
    : Header()
    , type()
    , center()
    , size_x(0.0)
    , size_y(0.0)
    , index(0)
    , isnew(false)  {
    }
  ROI_(const ContainerAllocator& _alloc)
    : Header(_alloc)
    , type(_alloc)
    , center(_alloc)
    , size_x(0.0)
    , size_y(0.0)
    , index(0)
    , isnew(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _Header_type;
  _Header_type Header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef float _size_x_type;
  _size_x_type size_x;

   typedef float _size_y_type;
  _size_y_type size_y;

   typedef uint8_t _index_type;
  _index_type index;

   typedef uint8_t _isnew_type;
  _isnew_type isnew;





  typedef boost::shared_ptr< ::poi_database::ROI_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::poi_database::ROI_<ContainerAllocator> const> ConstPtr;

}; // struct ROI_

typedef ::poi_database::ROI_<std::allocator<void> > ROI;

typedef boost::shared_ptr< ::poi_database::ROI > ROIPtr;
typedef boost::shared_ptr< ::poi_database::ROI const> ROIConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::poi_database::ROI_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::poi_database::ROI_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::poi_database::ROI_<ContainerAllocator1> & lhs, const ::poi_database::ROI_<ContainerAllocator2> & rhs)
{
  return lhs.Header == rhs.Header &&
    lhs.type == rhs.type &&
    lhs.center == rhs.center &&
    lhs.size_x == rhs.size_x &&
    lhs.size_y == rhs.size_y &&
    lhs.index == rhs.index &&
    lhs.isnew == rhs.isnew;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::poi_database::ROI_<ContainerAllocator1> & lhs, const ::poi_database::ROI_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace poi_database

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::poi_database::ROI_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::poi_database::ROI_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poi_database::ROI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poi_database::ROI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poi_database::ROI_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poi_database::ROI_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::poi_database::ROI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe6aa07fdbecd8b2e91005f5ecf70714";
  }

  static const char* value(const ::poi_database::ROI_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe6aa07fdbecd8b2ULL;
  static const uint64_t static_value2 = 0xe91005f5ecf70714ULL;
};

template<class ContainerAllocator>
struct DataType< ::poi_database::ROI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "poi_database/ROI";
  }

  static const char* value(const ::poi_database::ROI_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::poi_database::ROI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header Header\n"
"string type\n"
"geometry_msgs/Point center\n"
"float32 size_x\n"
"float32 size_y\n"
"uint8 index\n"
"bool isnew\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::poi_database::ROI_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::poi_database::ROI_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Header);
      stream.next(m.type);
      stream.next(m.center);
      stream.next(m.size_x);
      stream.next(m.size_y);
      stream.next(m.index);
      stream.next(m.isnew);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ROI_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::poi_database::ROI_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::poi_database::ROI_<ContainerAllocator>& v)
  {
    s << indent << "Header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.Header);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "size_x: ";
    Printer<float>::stream(s, indent + "  ", v.size_x);
    s << indent << "size_y: ";
    Printer<float>::stream(s, indent + "  ", v.size_y);
    s << indent << "index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.index);
    s << indent << "isnew: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isnew);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POI_DATABASE_MESSAGE_ROI_H
