# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from turtlebot_2dnav/fake_bound.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class fake_bound(genpy.Message):
  _md5sum = "d1c2e5bd63abef51265cdf5e8668cf43"
  _type = "turtlebot_2dnav/fake_bound"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point pointleftmin
geometry_msgs/Point pointleftmax
geometry_msgs/Point pointrightmin
geometry_msgs/Point pointrightmax
bool isvertical
uint8 index
bool resize
bool exit

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['pointleftmin','pointleftmax','pointrightmin','pointrightmax','isvertical','index','resize','exit']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','bool','uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pointleftmin,pointleftmax,pointrightmin,pointrightmax,isvertical,index,resize,exit

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(fake_bound, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pointleftmin is None:
        self.pointleftmin = geometry_msgs.msg.Point()
      if self.pointleftmax is None:
        self.pointleftmax = geometry_msgs.msg.Point()
      if self.pointrightmin is None:
        self.pointrightmin = geometry_msgs.msg.Point()
      if self.pointrightmax is None:
        self.pointrightmax = geometry_msgs.msg.Point()
      if self.isvertical is None:
        self.isvertical = False
      if self.index is None:
        self.index = 0
      if self.resize is None:
        self.resize = False
      if self.exit is None:
        self.exit = False
    else:
      self.pointleftmin = geometry_msgs.msg.Point()
      self.pointleftmax = geometry_msgs.msg.Point()
      self.pointrightmin = geometry_msgs.msg.Point()
      self.pointrightmax = geometry_msgs.msg.Point()
      self.isvertical = False
      self.index = 0
      self.resize = False
      self.exit = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12d4B().pack(_x.pointleftmin.x, _x.pointleftmin.y, _x.pointleftmin.z, _x.pointleftmax.x, _x.pointleftmax.y, _x.pointleftmax.z, _x.pointrightmin.x, _x.pointrightmin.y, _x.pointrightmin.z, _x.pointrightmax.x, _x.pointrightmax.y, _x.pointrightmax.z, _x.isvertical, _x.index, _x.resize, _x.exit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pointleftmin is None:
        self.pointleftmin = geometry_msgs.msg.Point()
      if self.pointleftmax is None:
        self.pointleftmax = geometry_msgs.msg.Point()
      if self.pointrightmin is None:
        self.pointrightmin = geometry_msgs.msg.Point()
      if self.pointrightmax is None:
        self.pointrightmax = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 100
      (_x.pointleftmin.x, _x.pointleftmin.y, _x.pointleftmin.z, _x.pointleftmax.x, _x.pointleftmax.y, _x.pointleftmax.z, _x.pointrightmin.x, _x.pointrightmin.y, _x.pointrightmin.z, _x.pointrightmax.x, _x.pointrightmax.y, _x.pointrightmax.z, _x.isvertical, _x.index, _x.resize, _x.exit,) = _get_struct_12d4B().unpack(str[start:end])
      self.isvertical = bool(self.isvertical)
      self.resize = bool(self.resize)
      self.exit = bool(self.exit)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12d4B().pack(_x.pointleftmin.x, _x.pointleftmin.y, _x.pointleftmin.z, _x.pointleftmax.x, _x.pointleftmax.y, _x.pointleftmax.z, _x.pointrightmin.x, _x.pointrightmin.y, _x.pointrightmin.z, _x.pointrightmax.x, _x.pointrightmax.y, _x.pointrightmax.z, _x.isvertical, _x.index, _x.resize, _x.exit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pointleftmin is None:
        self.pointleftmin = geometry_msgs.msg.Point()
      if self.pointleftmax is None:
        self.pointleftmax = geometry_msgs.msg.Point()
      if self.pointrightmin is None:
        self.pointrightmin = geometry_msgs.msg.Point()
      if self.pointrightmax is None:
        self.pointrightmax = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 100
      (_x.pointleftmin.x, _x.pointleftmin.y, _x.pointleftmin.z, _x.pointleftmax.x, _x.pointleftmax.y, _x.pointleftmax.z, _x.pointrightmin.x, _x.pointrightmin.y, _x.pointrightmin.z, _x.pointrightmax.x, _x.pointrightmax.y, _x.pointrightmax.z, _x.isvertical, _x.index, _x.resize, _x.exit,) = _get_struct_12d4B().unpack(str[start:end])
      self.isvertical = bool(self.isvertical)
      self.resize = bool(self.resize)
      self.exit = bool(self.exit)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d4B = None
def _get_struct_12d4B():
    global _struct_12d4B
    if _struct_12d4B is None:
        _struct_12d4B = struct.Struct("<12d4B")
    return _struct_12d4B
