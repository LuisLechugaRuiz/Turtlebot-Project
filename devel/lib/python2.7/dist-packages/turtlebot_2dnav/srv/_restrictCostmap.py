# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from turtlebot_2dnav/restrictCostmapRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class restrictCostmapRequest(genpy.Message):
  _md5sum = "c14041ac6488aa9930bd5e86e63fb3d5"
  _type = "turtlebot_2dnav/restrictCostmapRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point Point
int32 index
int32 color
bool restrict
bool isvertical
bool exit

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['Point','index','color','restrict','isvertical','exit']
  _slot_types = ['geometry_msgs/Point','int32','int32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Point,index,color,restrict,isvertical,exit

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(restrictCostmapRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Point is None:
        self.Point = geometry_msgs.msg.Point()
      if self.index is None:
        self.index = 0
      if self.color is None:
        self.color = 0
      if self.restrict is None:
        self.restrict = False
      if self.isvertical is None:
        self.isvertical = False
      if self.exit is None:
        self.exit = False
    else:
      self.Point = geometry_msgs.msg.Point()
      self.index = 0
      self.color = 0
      self.restrict = False
      self.isvertical = False
      self.exit = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d2i3B().pack(_x.Point.x, _x.Point.y, _x.Point.z, _x.index, _x.color, _x.restrict, _x.isvertical, _x.exit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Point is None:
        self.Point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 35
      (_x.Point.x, _x.Point.y, _x.Point.z, _x.index, _x.color, _x.restrict, _x.isvertical, _x.exit,) = _get_struct_3d2i3B().unpack(str[start:end])
      self.restrict = bool(self.restrict)
      self.isvertical = bool(self.isvertical)
      self.exit = bool(self.exit)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d2i3B().pack(_x.Point.x, _x.Point.y, _x.Point.z, _x.index, _x.color, _x.restrict, _x.isvertical, _x.exit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Point is None:
        self.Point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 35
      (_x.Point.x, _x.Point.y, _x.Point.z, _x.index, _x.color, _x.restrict, _x.isvertical, _x.exit,) = _get_struct_3d2i3B().unpack(str[start:end])
      self.restrict = bool(self.restrict)
      self.isvertical = bool(self.isvertical)
      self.exit = bool(self.exit)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d2i3B = None
def _get_struct_3d2i3B():
    global _struct_3d2i3B
    if _struct_3d2i3B is None:
        _struct_3d2i3B = struct.Struct("<3d2i3B")
    return _struct_3d2i3B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from turtlebot_2dnav/restrictCostmapResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class restrictCostmapResponse(genpy.Message):
  _md5sum = "2123167eab87b647a50a6c172571b7b6"
  _type = "turtlebot_2dnav/restrictCostmapResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool received
geometry_msgs/Point NewCenter


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['received','NewCenter']
  _slot_types = ['bool','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       received,NewCenter

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(restrictCostmapResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.received is None:
        self.received = False
      if self.NewCenter is None:
        self.NewCenter = geometry_msgs.msg.Point()
    else:
      self.received = False
      self.NewCenter = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3d().pack(_x.received, _x.NewCenter.x, _x.NewCenter.y, _x.NewCenter.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.NewCenter is None:
        self.NewCenter = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.received, _x.NewCenter.x, _x.NewCenter.y, _x.NewCenter.z,) = _get_struct_B3d().unpack(str[start:end])
      self.received = bool(self.received)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3d().pack(_x.received, _x.NewCenter.x, _x.NewCenter.y, _x.NewCenter.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.NewCenter is None:
        self.NewCenter = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.received, _x.NewCenter.x, _x.NewCenter.y, _x.NewCenter.z,) = _get_struct_B3d().unpack(str[start:end])
      self.received = bool(self.received)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3d = None
def _get_struct_B3d():
    global _struct_B3d
    if _struct_B3d is None:
        _struct_B3d = struct.Struct("<B3d")
    return _struct_B3d
class restrictCostmap(object):
  _type          = 'turtlebot_2dnav/restrictCostmap'
  _md5sum = 'ca045509d540aafaf4518df5620d8993'
  _request_class  = restrictCostmapRequest
  _response_class = restrictCostmapResponse
